name: Promote
run-name: "üéâ CD: Promote Green to Blue (${{ github.event.inputs.ref }})"
on:
  workflow_dispatch:
    inputs:
      ref:
        required: true
      s3_bucket_hostname:
        required: true

jobs:
  previous:
    name: üéüÔ∏è Get Previous Blue Ref
    runs-on: ubuntu-latest
    outputs:
      ref: ${{steps.commit.outputs.hash}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Find Previous Blue Version
        id: previous
        uses: jimschubert/query-tag-action@v1
        with:
          include: "blue/*"

      - name: Checkout Tag
        uses: actions/checkout@v3
        with:
          ref: ${{steps.previous.outputs.tag}}

      - name: Get Commit Hash
        id: commit
        run: |
          echo "Tag: ${{steps.previous.outputs.tag}}"
          commit=$(git rev-parse HEAD)
          echo "Previous Commit: $commit"
          echo "hash=$commit" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  promote:
    name: üöÄ Promote Green to Blue
    runs-on: ubuntu-latest
    needs: [previous]
    environment:
      name: Production
      url: http://${{ steps.router.outputs.website_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}
          depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Use Production Workspace
        uses: dflook/terraform-new-workspace@v1
        with:
          path: util/terraform/router
          workspace: anyhasher-production

      # - name: Simulate an error
      #  run: exit 1

      - name: Switch the Router
        uses: dflook/terraform-apply@v1
        with:
          workspace: anyhasher-production
          auto_approve: true
          path: util/terraform/router
          variables: |
            s3_bucket_hostname = "${{ github.event.inputs.s3_bucket_hostname }}"
            origin_id = "${{ github.event.inputs.s3_bucket_hostname }}"

      - name: Get outputs
        uses: dflook/terraform-output@v1
        id: router
        with:
          workspace: anyhasher-production
          path: util/terraform/router

      - run: echo ${{ steps.router.outputs.website_url }}

  release:
    name: üöõ Create New Blue Release
    runs-on: ubuntu-latest
    needs: [promote]
    environment:
      name: Production
      url: ${{ needs.promote.outputs.website_url }}
    steps:
      - name: Get Backend Artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build.yml
          name: backend-artifact-${{ github.event.inputs.ref }}
          skip_unpack: true

      - name: Get Frontend Artifact (Release Ver)
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: deploy.yml
          name: frontend-release-${{ github.event.inputs.ref }}
          skip_unpack: true

      - name: Tag Green as New Blue
        if: success()
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "blue/${{ github.event.inputs.ref }}"
          prerelease: false
          title: "Latest Production Release"
          files: |
            frontend-release-${{ github.event.inputs.ref }}.zip
            backend-artifact-${{ github.event.inputs.ref }}.zip

  cleanup_failing_green:
    name: ‚ùå Clean up Failing Green
    needs: [promote]
    if: failure()
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Dispatch
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Cleanup
          inputs: '{ "ref": "${{ github.event.inputs.ref }}", "env_name": "‚õî Detroy Green Env after Failed Promotion" }'

  cleanup_old_blue:
    name: üî• Clean up Previous Blue
    needs: [release, previous]
    if: success() && needs.previous.outputs.ref != ''
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Dispatch
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Cleanup
          inputs: '{ "ref": "${{ needs.previous.outputs.ref }}", "env_name": "üî• Cleanup Decomissioned Prod Env" }'
